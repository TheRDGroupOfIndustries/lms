// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  INSTRUCTOR
  ADMIN
}

enum Language {
  ENGLISH
  HINDI
}

enum ConsultationStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  REJECTED
  COMPLETED
  CANCELLED
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum VideoSource {
  UPLOADED
  YOUTUBE
  VIMEO
}

enum MaterialType {
  FILE
  LINK
}

enum Permission {
  MANAGE_USERS
  MANAGE_COURSES
  MANAGE_CONSULTATIONS
  MANAGE_PAYMENTS
  MANAGE_ROLES
  MANAGE_SYSTEM_CONFIG
}

enum AssignmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

model User {
  id                String         @id @default(cuid())
  email             String         @unique
  password          String?
  name              String
  role              Role           @default(USER)
  permissions       Permission[]
  preferredLanguage Language       @default(ENGLISH)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  courses           CourseEnrollment[]
  courseRatings CourseRating[]
  consultations     Consultation[]
  payments          Payment[]
  tickets           Ticket[]
  instructorProfile InstructorProfile?
  assignments       Assignment[]
  quizzes           QuizResult[]
}

model InstructorProfile {
  id          String         @id @default(cuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String         @unique
  bio         String
  expertise   String[]
  courses     Course[]
  consultations Consultation[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  hourlyRate    Float
  freeResources FreeResource[]
  country     String?
  state       String?
  socialLinks Json?
  profilePicture String?
}

model Course {
  id          String         @id @default(cuid())
  title       String
  description String
  videoUrl    String
  videoSource VideoSource  @default(YOUTUBE)
  price       Float
  instructor  InstructorProfile @relation(fields: [instructorId], references: [id])
  instructorId String
  payments    Payment[]
  featured  Boolean @default(false)
  published Boolean @default(false)
  language    Language
  materials   CourseMaterial[]
  enrollments CourseEnrollment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  audioGuide  String?
  ratings    CourseRating[]
  translatedTitle String?
  translatedDescription String?
  assignments Assignment[]
  quizzes     Quiz[]
  thumbnailUrl String?       

  @@index([published, featured])
}

model CourseRating {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([courseId, userId])
  @@index([courseId])
}

model CourseMaterial {
  id          String   @id @default(cuid())
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  title       String
  type        MaterialType @default(FILE)   // e.g., "PDF", "LINK"
  content     String   // URL or file path
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([courseId])
}

model CourseEnrollment {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String
  enrolledAt  DateTime @default(now())
  completedAt DateTime?
  paymentId   String? 
  payment     Payment? @relation("CourseEnrollments", fields: [paymentId], references: [id]) 
  progress    Float    @default(0)
  studyHours  Float    @default(0)

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
}

model Assignment {
  id          String           @id @default(cuid())
  title       String
  description String
  dueDate     DateTime
  course      Course           @relation(fields: [courseId], references: [id])
  courseId    String
  user        User             @relation(fields: [userId], references: [id])
  userId      String
  status      AssignmentStatus @default(NOT_STARTED)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([courseId, userId, title])
}

model Quiz {
  id          String      @id @default(cuid())
  title       String
  description String
  course      Course      @relation(fields: [courseId], references: [id])
  courseId    String
  questions   Question[]
  results     QuizResult[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Question {
  id          String   @id @default(cuid())
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      String
  text        String
  options     String[] // Array of possible answers
  correctOption Int    // Index of the correct answer in the options array
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model QuizResult {
  id          String   @id @default(cuid())
  quiz        Quiz     @relation(fields: [quizId], references: [id])
  quizId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  score       Float
  completedAt DateTime @default(now())

  @@unique([quizId, userId])
}

model Consultation {
  id          String             @id @default(cuid())
  user        User               @relation(fields: [userId], references: [id])
  userId      String
  instructor  InstructorProfile  @relation(fields: [instructorId], references: [id])
  instructorId String
  status      ConsultationStatus @default(PENDING)
  scheduledAt DateTime
  duration    Int                // in hours
  meetLink    String?
  price       Float
  payment     Payment?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  notes       String?
}

model PayuTransaction {
  id             String   @id @default(cuid())
  payment        Payment  @relation(fields: [paymentId], references: [id])
  paymentId      String   @unique
  txnid          String   @unique
  amount         Float
  productinfo    String
  firstname      String
  email          String
  phone          String?
  status         String
  unmappedstatus String?
  hash           String
  mode           String?
  error          String?
  errorMessage   String?
  netAmount      Float?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status])
}

model Payment {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  amount         Float
  currency       String
  status         String
  paymentMethod  String
  transactionId  String        @unique
  course         Course?       @relation(fields: [courseId], references: [id])
  courseId       String?
  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?       @unique
  courseEnrollments CourseEnrollment[] @relation("CourseEnrollments")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  payuTransaction PayuTransaction?

  @@index([userId])
  @@index([courseId])
  @@index([status])
}

model Ticket {
  id          String       @id @default(cuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  title       String
  description String
  status      TicketStatus @default(OPEN)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model FreeResource {
  id            String           @id @default(cuid())
  title         String
  description   String
  url           String
  instructor    InstructorProfile @relation(fields: [instructorId], references: [id])
  instructorId  String
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
}

model SystemConfig {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}